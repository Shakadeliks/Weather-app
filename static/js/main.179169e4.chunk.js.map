{"version":3,"sources":["components/Weather.js","components/Form.js","App.js","index.js"],"names":["Weather","props","className","city","weatherIcon","temp_celsius","min","max","minMaxTemp","temp_min","temp_max","description","Form","error","data-test-id","role","onSubmit","loadWeather","type","name","autoComplete","placeholder","title","App","getWeather","e","a","preventDefault","target","elements","value","country","fetch","process","api_call","json","response","setState","sys","celsius","calculateCelsius","main","temp","weather","getWeatherIcon","id","state","undefined","icon","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","Math","floor","icons","rangeID","this","Helmet","charSet","rel","href","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.179169e4.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Weather( props ) {\r\n// function to dynamically render the minimum and maximum temp of location from api data\r\n    function minMaxTemp(min, max) {\r\n        if(min && max) {\r\n            return(\r\n                <h3>\r\n                    <span className='px-4'>{ min }&deg;</span>\r\n                    <span className='px-4'>{ max }&deg;</span>\r\n                </h3>\r\n            )\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='container text-light d-flex justify-content-center'>\r\n            <div className=\"cards pt-4\">\r\n                <h1>{ props.city }</h1>\r\n                <h5 className='py-4'>\r\n                    <i className={ `wi ${ props.weatherIcon } } display-1`}></i>\r\n                </h5>\r\n                \r\n                { props.temp_celsius ? (<h1 className='py-2'>{ props.temp_celsius }&deg;</h1>) : null}\r\n                \r\n                {/*show max and min temp*/}\r\n\r\n                { minMaxTemp(props.temp_min, props.temp_max) }\r\n\r\n                <h4 className='py-3'>{ props.description }</h4>\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\n\r\n// input form where the user will enter the city and country that they want the weather for\r\nconst Form = props => {\r\n\r\n    // function to display error message when no city and country have been entered into the input fields\r\n\r\n    function error(){\r\n        return (\r\n            <div className='alert alert-danger mx-5' data-test-id='error' role='alert'>\r\n                Please enter City & Country\r\n            </div>\r\n\r\n        )\r\n    }\r\n\r\n    return(\r\n        <div className='container'>\r\n            <div>{props.error ? error() : null}</div>\r\n            <form onSubmit={ props.loadWeather }>\r\n                <div className='row'>\r\n                    <div className='col-md-3 offset-md-2'>\r\n                        <input type='text' className='form-control' name='city' autoComplete='off' placeholder='City' title='city-input' />\r\n                    </div>\r\n                    <div className='col-md-3'>\r\n                        <input type='text' className='form-control' name='country' autoComplete='off' placeholder='Country' title='country-input'/>\r\n                    </div>\r\n                    <div className='col-md-3 mt-md-0 py-3 text-md-left'>\r\n                        <button className='btn btn-warning' name='get-weather' data-test-id='weatherBtn'>Get Weather</button>\r\n                    </div>\r\n                </div>    \r\n            </form>    \r\n                    \r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Form;","import Weather from './components/Weather'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport 'weather-icons/css/weather-icons.css'\nimport React, { Component } from 'react'\nimport Form from './components/Form'\nimport { Helmet } from \"react-helmet\"\n\n\n\n\nexport default class App extends Component {\n\n  constructor() {\n    super()\n    this.state = {\n      city: undefined,\n      country: undefined,\n      icon: undefined,\n      main: undefined,\n      celsius: undefined,\n      temp_max: undefined,\n      temp_min: undefined,\n      description:'',\n      error: false\n    }\n\n    this.weatherIcon = {\n      Thunderstorm: 'wi-thunderstorm',\n      Drizzle: 'wi-sleet',\n      Rain: 'wi-storm-showers',\n      Snow: 'wi-snow',\n      Atmosphere: 'wi-fog',\n      Clear: 'wi-day-sunny',\n      Clouds: 'wi-day-fog'\n    }\n  }\n // function to format the celsius data from api correctly\n  calculateCelsius(temp) {\n    let cel = Math.floor(temp - 273.15)\n    return cel;\n  }\n\n  // function that will assign the relevant weather icon depending on the weather forecast received from the api. done via the icon id provided by the api\n\n  getWeatherIcon( icons, rangeID ) {\n    switch ( true ) {\n      case rangeID >= 200 && rangeID <= 232:\n        this.setState({ icon: this.weatherIcon.Thunderstorm })\n        break;\n      case rangeID >= 300 && rangeID <= 321:\n        this.setState({ icon: this.weatherIcon.Drizzle })\n        break;\n      case rangeID >= 500 && rangeID <= 531:\n        this.setState({ icon: this.weatherIcon.Rain })\n        break;\n      case rangeID >= 600 && rangeID <= 622:\n        this.setState({ icon: this.weatherIcon.Snow })\n        break;\n      case rangeID >= 701 && rangeID <= 781:\n        this.setState({ icon: this.weatherIcon.Atmosphere })\n        break;\n      case rangeID === 800:\n        this.setState({ icon: this.weatherIcon.Clear })\n        break;\n      case rangeID >= 801 && rangeID <= 804:\n        this.setState({ icon: this.weatherIcon.Clouds })\n        break;\n      default:\n        this.setState({ icon: this.weatherIcon.Clouds })\n    }\n  }\n\n  //API CALL api.openweathermap.org/data/2.5/weather?q=London&appid={API key}\n //function to pull the weather data from the weather api asynchronously\n  getWeather = async ( e ) => {\n\n    e.preventDefault();\n\n    const city = e.target.elements.city.value;\n\n    const country = e.target.elements.country.value;\n\n      \n    if(city && country) {\n\n      const api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${process.env.REACT_APP_API_KEY}`);\n\n      const response = await api_call.json();\n\n      // uses the data from the api to change the states created, to be passed as props to be rendered in weather component\n      this.setState({\n        city: `${ response.name}, ${ response.sys.country }`,\n        country: response.sys.country,\n        celsius: this.calculateCelsius(response.main.temp),\n        temp_max: this.calculateCelsius(response.main.temp_max),\n        temp_min: this.calculateCelsius(response.main.temp_min),\n        description: response.weather[0].description,\n        error: false\n      })\n\n      this.getWeatherIcon(this.weatherIcon, response.weather[0].id);\n      \n    } else {\n      this.setState({ error: true });\n    }\n  }\n  render() {\n    return (\n      <div className='App'>\n        <Helmet>\n          <meta charSet=\"utf-8\" />\n          <title>Weather App</title>\n          <link rel=\"canonical\" href=\"http://Shakadeliks.github.io/weather-app\" />\n        </Helmet>\n        <Form loadWeather={ this.getWeather } error={ this.state.error }/>\n        <Weather \n          city={ this.state.city } \n          country={ this.state.country }\n          temp_celsius={ this.state.celsius }\n          temp_max={ this.state.temp_max }\n          temp_min={ this.state.temp_min }\n          description={ this.state.description }\n          weatherIcon={ this.state.icon } \n        />\n      </div>\n    )\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}